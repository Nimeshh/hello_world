Using a Child Class as its Parent Class
An important facet of polymorphism is the ability to use a child class object where an object of its parent class
is expected.

One way to do this explicitly is to instantiate a child class object as a member of the parent class.
We can instantiate a CheckingAcount object as a BankAccount like this:

BankAccount kaylasAccount = new CheckingAcount(600.00);

We can use kaylasAccount as if it were an instance of BankAccount, in any situation where a BankAccount object
would be expected. (This would be true even if kaylasAccount were instantiated as a CheckingAccount, but using the
explicit child as parent syntax is most helpful when we want to declare objects in bulk.)

It is important to note here that the compiler just considers kaylasAccount to be any old BankAccount.
But because method overriding is handled at runtime, if we call printBalance(), we’ll see something CheckingAccount
specific:

Your checking account balance is $600.00
This is because at runtime, kaylasAccount is recognized as the CheckingAccount it is.
So, what if CheckingAccount has a method transferToSavings() that BankAccount does not have? Can kaylasAccount still
use that method?

Well, no. The compiler believes that kaylasAccount is just a BankAccount that doesn’t have some fancy child class
transferToSavings() method, so it would throw an error.

Instructions
1.
If you take a look at the Dinner class, you’ll see there’s a makeNoodles() method that accepts a Noodle object as
an argument.

In main(), instantiate a BiangBiang object as a Noodle called biangBiang.

Then call makeNoodles() on noodlesDinner with the following arguments:

biangBiang
"soy sauce and chili oil"





Child Classes in Arrays and ArrayLists
Usually, when we create an array or an ArrayList, the list items all need to be the same type. But polymorphism puts a
new spin on what is considered the same type…

In fact, we can put instances of different classes that share a parent class together in an array or ArrayList!
For example, let’s say we have a Monster parent class with a few child classes: Vampire, Werewolf, and Zombie.
We can set up an array with instances of each:

Monster dracula, wolfman, zombie1;

dracula = new Vampire();
wolfman = new Werewolf();
zombie1 = new Zombie();

Monster[] monsters = {dracula, wolfman, zombie1};
We can even iterate through the list of items — regardless of subclass — and perform the same action with each item:

for (Monster monster : monsters) {

  monster.attack();

}
In the code above, we were able to call attack() on each monster in monsters despite the fact that, in the
for-each loop, monster is declared as the parent class type Monster.